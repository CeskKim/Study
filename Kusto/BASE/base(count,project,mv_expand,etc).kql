.show tables 

//count 
StormEvents
| count 

//project
StormEvents
| take 5
| project  StartTime, EndTime, EpisodeId, EventId, State

//where, and 
StormEvents
| where EpisodeId  == 1930
  and EventId == 9488
| project StartTime, EndTime, EpisodeId, EventId, State

//sort
StormEvents
| where State == 'NEW YORK'
  and EventType == 'Winter Weather'
| sort by EventId desc

//top
StormEvents
| where State == 'NEW YORK'
  and EventType  == 'Winter Weather'
| top 10 by EventId desc
| sort by EventId desc

//extend
StormEvents
| where State == 'NEW YORK'
  and EventType == 'Winter Weather'
| extend Duration = EndTime - StartTime
| top 10 by EventId desc 
| sort by EventId desc 
| project Duration, StartTime, EndTime, EventId,EventType, State

//summarize
StormEvents
| summarize state_count = count() by State

//summarize2
StormEvents
| summarize StormsCount = count(), TypeOfStorms = dcount(EventType) by State
| top 10 by StormsCount desc

StormEvents
| take 10 

//render(columnchart)
StormEvents
| summarize EventCount = count(), mid = avg(BeginLat) by State
| sort by mid
| where EventCount > 1800 
| project State, mid
| render columnchart 

//render(timechart)
StormEvents
| summarize EventCount = count() by bin(StartTime, 1d)
| render timechart 

//render(timechart)v2
StormEvents
| extend hour = floor(StartTime % 1d, 1h)
| summarize EventCount = count() by hour
| render timechart 

//render(timechart)v3
StormEvents
| where State in("GULF OF MEXICO","MAINE","VIRGINIA","WISCONSIN","NORTH DAKOTA","NEW JERSEY","OREGON")
| extend hour = floor(StartTime % 1d, 1h)
| summarize EvnetCount = count() by hour, State
| render timechart 

//bin
StormEvents
| where StartTime > datetime('2007-02-14') and StartTime < datetime('2007-02-21')
| summarize EventCount = count() by bin(StartTime, 1d)

//case
StormEvents
| summarize deaths = sum(DeathsIndirect) by State
| extend death_bucket = case(
                                deaths > 50, "large"
                            ,   deaths > 10, "medium"
                            ,   deaths > 0, "small"
                            ,   "N/A"
                            )
| sort by State desc 

//parse_json()
let Mytable = datatable(trace : string)
['{"duration":[{"value":118.0,"valcount":5.0,"min":100.0,"max":150.0,"stdDev":0.0}]}'];
Mytable
| extend Newcol = parse_json(trace)
| project Newcol.duration[0].value, Newcol.duration[0].valcount, Newcol.duration[0].min, Newcol.duration[0].max, Newcol.duration[0].stdDev

//parse_json()v2
let MyData = datatable (Trace: string) ['{"value":118.0,"valcount":5.0,"min":100.0,"max":150.0,"stdDev":0.0}'];
MyData
| extend NewCol = parse_json(Trace)
| project NewCol.value, NewCol.valcount, NewCol.min, NewCol.max, NewCol.stdDev

//parse_json()v3
let MyData = datatable (Trace: dynamic)
[dynamic({"value":118.0,"counter":5.0,"min":100.0,"max":150.0,"stdDev":0.0})];
MyData
| project Trace.value, Trace.counter, Trace.min, Trace.max, Trace.stdDev

//mv_expand
let FloodDataSet = StormEvents
| where EventType == "Flood"
| summarize FloodDataSet = makeset(StartTime) by State
| project State, FloodDataSet;
FloodDataSet
| mv-expand FloodDataSet  

//mv_expandv2
let TestData = datatable (a : int, b : dynamic)[1, dynamic({"probe1" : "1", "probe2" : "2"})];
TestData
| project a,b
| mv-expand b


// 참조사이트 : https://docs.microsoft.com/ko-kr/azure/data-explorer/write-queries, https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/mvexpandoperator
